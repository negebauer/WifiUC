require 'pilot'
require 'fastlane_core'

import '../../scripts/Fastfile'

before_all do
  BUILD = get_build_number
  PLATFORM = 'iOS'

  GYM_CODE_SIGNING_IDENTITY = ENV['GYM_CODE_SIGNING_IDENTITY']
  GYM_CODE_SIGNING_IDENTITY = 'iPhone Distribution: Nicol√°s Gebauer (BJJKE72WM4)' unless GYM_CODE_SIGNING_IDENTITY
end

desc 'Build app'
lane :build do
  mynotification('Building...')
  gym(
    scheme: 'WifiUC',
    codesigning_identity: GYM_CODE_SIGNING_IDENTITY
  )
end

desc 'Distribute the latest uploaded build to internal testers'
lane :distribute do
  mynotification('Distributing TestFlight version...')
  config = FastlaneCore::Configuration.create(Pilot::Options.available_options, {})
  config[:distribute_external] = false
  Pilot::BuildManager.new.distribute(config)
end

desc 'Submit a new Alpha Build to Apple TestFlight'
lane :alpha do
  # badge(shield: "#{VERSION}-#{BUILD}-blue", shield_no_resize: true, alpha: true, dark: false)
  build
  # sh 'git checkout ../WifiUC/Images.xcassets/'
  # sh 'git checkout ../Watch/Assets.xcassets/'
  mynotification('Uploading alpha version...')
  pilot
  distribute
  mynotification('Finished uploading alpha version')
end

desc 'Submit a new Beta Build to Apple TestFlight'
lane :beta do
  # badge(shield: "#{VERSION}-#{BUILD}-blue", shield_no_resize: true, alpha: false, dark: true)
  build
  # sh 'git checkout ../WifiUC/Images.xcassets/'
  # sh 'git checkout ../Watch/Assets.xcassets/'
  mynotification('Uploading beta version...')
  pilot
  distribute
  mynotification('Finished uploading beta version')
end

desc 'Deploy a new version to the App Store'
lane :release do
  build
  mynotification('Uploading App Store version')
  deliver(
    skip_screenshots: true,
    skip_metadata: true,
    submit_for_review: true,
    force: true,
    automatic_release: true,
  )
  mynotification('Finished uploading App Store version')
end

desc 'Upload metada and screenshots'
lane :metadata do
  mynotification('Uploading metadata')
  deliver(
    skip_binary_upload: true,
    skip_screenshots: false,
    skip_metadata: false,
    overwrite_screenshots: true,
    app_icon: ENV['ICON'],
    apple_watch_app_icon: ENV['ICON_WATCH'],
    force: true,
    app_version: VERSION,
  )
  mynotification('Finished uploading metadata')
end

after_all do |lane|

end

error do |lane, exception|

end
