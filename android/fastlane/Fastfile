import '../../scripts/Fastfile'

before_all do
  CRASHLYTICS_API_TOKEN = 'd6c5fb7c298d35bbea50ef09cd0d44e1c06d1401'.freeze
  CRASHLYTICS_BUILD_SECRET = 'fad6fff8529401e43667089948e7545d9a7d2a6563fe0ebddfbf00bf3d3105b3'.freeze
  PLATFORM = 'Android'
  File.open "#{PATH_ANDROID}/app/build.gradle" do |gradle|
    BUILD = gradle.find { |line| line =~ /versionCode/ }.strip.split(' ')[1]
  end
end

def checkout_images()
  sh "git checkout #{PATH_ANDROID}/app/src/main/res/"
end

def upload(track = 'beta')
  mynotification("Uploading #{track}...")
  supply(
    track: track,
    skip_upload_metadata: true,
    skip_upload_images: true,
    skip_upload_screenshots: true,
  )
end

desc 'Build and sign apk'
lane :build do
  mynotification('Building...')
  gradle(task: 'clean')
  gradle(task: 'assemble', build_type: 'Release')
end

lane :distribute do
  puts 'Doesn\'t do anything'
end

desc 'Submit a new Alpha Build to Crashlytics Beta'
lane :alpha do
  badge(shield: "#{VERSION}-#{BUILD}-blue", alpha: true, dark: false, glob: '/app/src/main/res/**/*.png', shield_no_resize: true)
  build
  checkout_images
  upload('alpha')
  mynotification('Finished uploading alpha version')
end

desc 'Submit a new Beta Build to Crashlytics Beta'
lane :beta do
  badge(shield: "#{VERSION}-#{BUILD}-blue", alpha: false, dark: true, glob: '/app/src/main/res/**/*.png', shield_no_resize: true)
  build
  checkout_images
  upload('beta')
  mynotification('Finished uploading beta version')
end

desc 'Deploy a new version to the Google Play'
lane :store do
  build
  upload('production')
  mynotification('Finished uploading Google Play version')
end

lane :store_prep do
  build
  upload('alpha')
  mynotification('Finished uploading Google Play version to alpha')
end

desc 'Upload metada and screenshots'
lane :metadata do
  supply(
    skip_upload_apk: true
  )
end

after_all do |lane|
end

error do |lane, exception|
end
